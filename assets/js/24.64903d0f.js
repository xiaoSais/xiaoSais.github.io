(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{231:function(s,a,n){"use strict";n.r(a);var e=n(17),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"一、工具类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、工具类"}},[s._v("#")]),s._v(" 一、工具类")]),s._v(" "),n("p",[s._v("文件路径 lib/util.js")]),s._v(" "),n("h3",{attrs:{id:"数据类型判定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型判定"}},[s._v("#")]),s._v(" 数据类型判定")]),s._v(" "),n("h4",{attrs:{id:"object-prototype-tostring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring"}},[s._v("#")]),s._v(" Object.prototype.toString")]),s._v(" "),n("ul",[n("li",[s._v("array、arrayBuffer、file、blob、function、date")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  // eg. 判断是否是 arrayBuffer 类型\n  Object.prototype.toString.call(val) === '[object ArrayBuffer]'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h4",{attrs:{id:"typeof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[s._v("#")]),s._v(" typeof")]),s._v(" "),n("ul",[n("li",[s._v("undefined、string、number、object")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  // eg. 判断是否是 string 类型\n  typeof val === 'string'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h4",{attrs:{id:"instanceof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[s._v("#")]),s._v(" instanceof")]),s._v(" "),n("p",[s._v("URLSearchParams 是一个类，它的实例封装了一些处理查询字符串的实用方法，构造函数可以传一个字符串。")]),s._v(" "),n("ul",[n("li",[s._v("formData、URLSearchParams")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  // eg. 判断是否是 formData 类型\n   (typeof FormData !== 'undefined') && (val instanceof FormData)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h4",{attrs:{id:"其他"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("buffer")]),s._v(" "),n("p",[s._v("buffer 是 Node.js 中用于读取或者操作二进制数据量的类，其类上定义了 isBuffer() 方法判断该数据是否是 Buffer 的实例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("axios适用的浏览器环境判断")]),s._v(" "),n("p",[s._v("非 RN 环境，非原生环境，不能是 web-worker（ web-worker 无法使用 window 对象和 document 对象）")])])]),s._v(" "),n("h3",{attrs:{id:"遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[s._v("#")]),s._v(" 遍历")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("forEach（obj, fn）")]),s._v(" "),n("p",[s._v("适用于数组和对象，如果obj不是两者之一，则将其转化为 [obj] 的数组形式。如果是数组 / 对象，则遍历数组 / 对象，执行fn(item, index, obj) | fn(value, key, obj), 此时的 key 指的是自身属性，不是继承而来的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function forEach (obj, fn) {\n  ...\n  if (isArray(obj)) {\n    // 也可以这样写\n    // return obj.forEach(fn)\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("拓展了array.forEach的功能，使其应用于普通对象。")])])]),s._v(" "),n("h3",{attrs:{id:"合并"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合并"}},[s._v("#")]),s._v(" 合并")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("merge (obj1, obj2, obj3...)")]),s._v(" "),n("p",[s._v("合并对象，相同的key，如果值为对象，后面的会和前面的值进行合并，类似于Object.assign(),该方法也适用于数组。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  function merge(/* obj1, obj2, obj3, ... */) {\n    var result = {};\n    function assignValue(val, key) {\n      if (typeof result[key] === 'object' && typeof val === 'object') {\n        result[key] = merge(result[key], val);\n      } else {\n        result[key] = val;\n      }\n    }\n\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      forEach(arguments[i], assignValue);\n    }\n    return result;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("merge 和 Object.assign() 的区别")]),s._v(" "),n("p",[s._v("merge 遇到相同属性的时候，如果属性值为纯对象或者集合时，不是用后面的属性去覆盖前面的属性值，而是会把前后两个属性值合并。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  // { a: 1, b: { e: 4 } }\n  Object.assign(\n    {},\n    { a: 1 },\n    { b: { c: 2, d: 3} },\n    { b: { e: 4 } }\n  )\n  // { a: 1, b: { c: 2, d: 3, e: 4 } }\n  merge({},\n    { a: 1 },\n    { b: { c: 2, d: 3} },\n    { b: { e: 4 } }\n  )\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("deepMerge (obj1, obj2, obj3)")]),s._v(" "),n("p",[s._v("该方法类似于 Merge，唯一区别是返回的新对象不会影响到传入的参数对象。")])])]),s._v(" "),n("h3",{attrs:{id:"继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[s._v("#")]),s._v(" 继承")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("extend(a, b, thisArg)")]),s._v(" "),n("p",[s._v("遍历 b 的 key，如果该 key 的值为function，将 this 绑定到 thisArg 上并赋值给 a，否则将 a[key] 置为 b[key]，最后返回a。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  function extend(a, b, thisArg) {\n    forEach(b, function assignValue(val, key) {\n      if (thisArg && typeof v al === 'function') {\n        a[key] = bind(val, thisArg);\n      } else {\n        a[key] = val;\n      }\n    });\n    return a;\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])])])])])}),[],!1,null,null,null);a.default=t.exports}}]);