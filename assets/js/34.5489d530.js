(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{241:function(e,s,n){"use strict";n.r(s);var a=n(17),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"一、构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、构造函数"}},[e._v("#")]),e._v(" 一、构造函数")]),e._v(" "),n("p",[e._v("express是这样使用的:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var express = require('express');\n  var app = express();\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("构造函数源码在 lib/express.js 下:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  function createApplication() {\n    var app = function(req, res, next) {\n      app.handle(req, res, next);\n    };\n\n    mixin(app, EventEmitter.prototype, false);\n    mixin(app, proto, false);\n\n    // expose the prototype that will get set on requests\n    app.request = Object.create(req, {\n      app: { configurable: true, enumerable: true, writable: true, value: app }\n    })\n\n    // expose the prototype that will get set on responses\n    app.response = Object.create(res, {\n      app: { configurable: true, enumerable: true, writable: true, value: app }\n    })\n\n    app.init();\n    return app;\n  }\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br")])]),n("p",[e._v("先看下 mixin 做了什么事情，mixin引入了外部的 merge-descriptors 库：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  var mixin = require('merge-descriptors');\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("merge-descriptors 的源码在index.js下，很短：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  function merge (dest, src, redefine) {\n    if (!dest) {\n      throw new TypeError('argument dest is required')\n    }\n\n    if (!src) {\n      throw new TypeError('argument src is required')\n    }\n\n    if (redefine === undefined) {\n      // Default to true\n      redefine = true\n    }\n    // 获取源对象的所有属性名组成的数组，包括不可枚举属性\n    Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName (name) {\n      // 如果目标对象有该属性并且 redefine 标志为false那么跳过该属性，不覆盖\n      if (!redefine && hasOwnProperty.call(dest, name)) {\n        // Skip descriptor\n        return\n      }\n\n      // 将 src 对象复制到 dest 上，包括属性描述符\n      var descriptor = Object.getOwnPropertyDescriptor(src, name)\n      Object.defineProperty(dest, name, descriptor)\n    })\n\n    return dest\n  }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br")])]),n("p",[e._v("该函数接受三个参数，dest：目标对象，src：源对象，redefine： 是否覆盖目标对象的属性")]),e._v(" "),n("p",[e._v("简单来说mixin(A,B)方法做了一个浅拷贝，将B的属性和值复制到A上。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  mixin(app, EventEmitter.prototype, false);\n  mixin(app, proto, false);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("这两句的意思就很明显了，这里使用 EventEmitter.prototype、 proto 和初始化app实例，其实也可以说是app实例继承了 EventEmitter 和 proto。")]),e._v(" "),n("p",[e._v("EventEmitter 是Node.js event包里的一个类，所有能触发事件的对象都是EventEmitter 类的实例。mixin之后，app应该有了EventEmitter类的所有方法，比如on()监听事件，emit()触发事件。")]),e._v(" "),n("p",[e._v("proto 是Express的实例核心，在 lib/application.js 下。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  app.request = Object.create(req, {\n      app: { configurable: true, enumerable: true, writable: true, value: app }\n    })\n\n  app.response = Object.create(res, {\n    app: { configurable: true, enumerable: true, writable: true, value: app }\n  })\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("这两句在app实例上挂载了request和response属性，他们分别指向了req和res对象，他们引自 lib/request.js 和 /lib/response.js，目的未知。")]),e._v(" "),n("p",[e._v("然后执行app.init()方法，猜想该方法应该是在 application.js 里定义的。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  exports.json = bodyParser.json\n  exports.query = require('./middleware/query');\n  exports.raw = bodyParser.raw\n  exports.static = require('serve-static');\n  exports.text = bodyParser.text\n  exports.urlencoded = bodyParser.urlencoded\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("在 express.js 的最后暴露出一些内置中间件，可以通过express.xxx()类似这种方式调用，在express 4.x文档里只有这四种内置中间件，其他定义的中间件也是可以使用的。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  express.json()\n  express.static()\n  express.Router()\n  express.urlcoded()\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("下边逐一说明express内置中间件的实现方式。")])])}),[],!1,null,null,null);s.default=r.exports}}]);