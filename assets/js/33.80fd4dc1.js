(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{240:function(s,e,n){"use strict";n.r(e);var a=n(17),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"四、设计模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、设计模式"}},[s._v("#")]),s._v(" 四、设计模式")]),s._v(" "),n("h2",{attrs:{id:"继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[s._v("#")]),s._v(" 继承")]),s._v(" "),n("h3",{attrs:{id:"mixin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mixin"}},[s._v("#")]),s._v(" mixin()")]),s._v(" "),n("p",[s._v("之前提到的 mixin() 方法位于 /lib/express.js。\nline 41 - 42")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  function createApplication() {\n    ...\n    mixin(app, EventEmitter.prototype, false);\n    mixin(app, proto, false);\n    ...\n  }  \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("贴一下 mixin() 的实现：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  function merge (dest, src, redefine) {\n    if (!dest) {\n      throw new TypeError('argument dest is required')\n    }\n\n    if (!src) {\n      throw new TypeError('argument src is required')\n    }\n\n    if (redefine === undefined) {\n      // Default to true\n      redefine = true\n    }\n    // 获取源对象的所有属性名组成的数组，包括不可枚举属性\n    Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName (name) {\n      // 如果目标对象有该属性并且 redefine 标志为false那么跳过该属性，不覆盖\n      if (!redefine && hasOwnProperty.call(dest, name)) {\n        // Skip descriptor\n        return\n      }\n\n      // 将 src 对象复制到 dest 上，包括属性描述符\n      var descriptor = Object.getOwnPropertyDescriptor(src, name)\n      Object.defineProperty(dest, name, descriptor)\n    })\n\n    return dest\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("p",[s._v("该方法的原理是通过 Object.getOwnPropertyNames() 获取源对象的所有属性（枚举和不可枚举） 然后遍历获取每个属性的属性描述符，再用Object.defineProperty() 定义目标对象的属性。这样目标对象就继承了源对象所有的属性值和方法。")]),s._v(" "),n("h2",{attrs:{id:"行为委托"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#行为委托"}},[s._v("#")]),s._v(" 行为委托")]),s._v(" "),n("h3",{attrs:{id:"object-create"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-create"}},[s._v("#")]),s._v(" Object.create()")]),s._v(" "),n("p",[s._v("/lib/express.js, line 45 - 47")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  app.request = Object.create(req, {\n    app: { configurable: true, enumerable: true, writable: true, value: app }\n  })\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("Object的作用是建立一个原型链,等效于 app.request."),n("strong",[s._v("proto")]),s._v(" = req")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  var a = {}\n  Object.defineProperty(a, 'ticj', {\n    configurable: false,\n    value: 23\n  })\n  Object.defineProperty(a, 'getName', {\n    configurable: false,\n    value: function (name) {\n      this.name = name\n    }\n  })\n  let d = Object.create(a)\n  // {}\n  console.log(d)\n  // 23 实例中找不到去原型中找到\n  console.log(d.ticj) \n  \n  let c = Object.create(a, { gg: {\n    configurable: false,\n    value: 'test'\n  }})\n  console.log(c)\n  // {gg: test}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[s._v("d 本身没有'ticj'属性，但是 d."),n("strong",[s._v("proto")]),s._v(" 有该属性，Object.create()属性的第二个参数和Obeject.defineProperty()相同。")]),s._v(" "),n("h3",{attrs:{id:"setprototypeof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setprototypeof"}},[s._v("#")]),s._v(" setprototypeof()")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  module.exports = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties)\n\n  function setProtoOf (obj, proto) {\n    obj.__proto__ = proto\n    return obj\n  }\n\n  function mixinProperties (obj, proto) {\n    for (var prop in proto) {\n      if (!obj.hasOwnProperty(prop)) {\n        obj[prop] = proto[prop]\n      }\n    }\n    return obj\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("两个方法，当前环境支持 "),n("strong",[s._v("proto")]),s._v("，就用 setProtoOf，作用和 Object.create() 相同，否则用mixinProperties (), 该方法的不会覆盖目标对象的属性，并且取的是源对象的可枚举属性，这点和 mixin 稍微区分一下。")])])}),[],!1,null,null,null);e.default=t.exports}}]);