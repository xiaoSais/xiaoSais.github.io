(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{220:function(s,a,n){"use strict";n.r(a);var t=n(17),r=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"动态规划"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[s._v("#")]),s._v(" 动态规划")]),s._v(" "),n("h2",{attrs:{id:"斐波那契数列问题的递归和动态规划"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#斐波那契数列问题的递归和动态规划"}},[s._v("#")]),s._v(" 斐波那契数列问题的递归和动态规划")]),s._v(" "),n("blockquote",[n("p",[s._v("Q1: 给定整数 N，返回斐波那契数列的第 N 项")])]),s._v(" "),n("p",[s._v("思路：斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……")]),s._v(" "),n("h3",{attrs:{id:"思路"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[s._v("#")]),s._v(" 思路")]),s._v(" "),n("h4",{attrs:{id:"问题转化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题转化"}},[s._v("#")]),s._v(" 问题转化")]),s._v(" "),n("p",[s._v("设 F(N) 为斐波那契数列的第 N 项。")]),s._v(" "),n("h4",{attrs:{id:"找递推公式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#找递推公式"}},[s._v("#")]),s._v(" 找递推公式")]),s._v(" "),n("p",[s._v("F(N) = F(N-1) + F(N-2)")]),s._v(" "),n("h4",{attrs:{id:"找初值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#找初值"}},[s._v("#")]),s._v(" 找初值")]),s._v(" "),n("p",[s._v("F(1) = 1, F(2) = 1")]),s._v(" "),n("h4",{attrs:{id:"转化为代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转化为代码"}},[s._v("#")]),s._v(" 转化为代码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  function fib(N) {\n    let F = []\n    F[1] = 1;\n    F[2] = 1;\n    for (let i = 3; i <= N; i++) {\n      F[i] = F[i-1] + F[i-2]\n    }\n    return F[N]\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("时间复杂度为 O(n), 空间复杂度为O(n);")]),s._v(" "),n("h3",{attrs:{id:"优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[s._v("#")]),s._v(" 优化")]),s._v(" "),n("p",[s._v("只保留 F(N-1) 和 F(N-2)")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  function fib(N) {\n    let pre1 = 1\n    let pre2 = 1\n    let res\n    for (let i = 3; i <= N; i++) {\n      res = pre1 + pre2\n      pre2 = pre1\n      pre1 = res\n    }\n    return res\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("时间复杂度为 O(n), 空间复杂度为O(1)")]),s._v(" "),n("blockquote",[n("p",[s._v("Q2: 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。")])]),s._v(" "),n("h3",{attrs:{id:"思路-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思路-2"}},[s._v("#")]),s._v(" 思路")]),s._v(" "),n("h3",{attrs:{id:"问题转化-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题转化-2"}},[s._v("#")]),s._v(" 问题转化")]),s._v(" "),n("p",[s._v("设 F(n) 为 n 级台阶总共的跳法。")]),s._v(" "),n("h3",{attrs:{id:"递推公式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递推公式"}},[s._v("#")]),s._v(" 递推公式")]),s._v(" "),n("p",[s._v("第 n 级台阶，要么是在 n - 1 级台阶跳上去的，要么是在 n-2 级台阶跳上去的。从 n - 1 级台阶跳上去总共就一种跳法， 从 n - 2 级台阶跳上去有两种（一级一级跳和一下跳两级）但是要去掉一种重复的（一级一级跳）。所以有递推公示:")]),s._v(" "),n("p",[s._v("F(n) = F(n-1) + F(n-2)")]),s._v(" "),n("h3",{attrs:{id:"找初值-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#找初值-2"}},[s._v("#")]),s._v(" 找初值")]),s._v(" "),n("p",[s._v("F(1) = 1; F(2) = 2; F(3) = 3")]),s._v(" "),n("h3",{attrs:{id:"转化为代码-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转化为代码-2"}},[s._v("#")]),s._v(" 转化为代码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  function jumpFloor(number) {\n    if (number <= 2) return number\n    let pre1 = 2\n    let pre2 = 1\n    let res\n    for (let i = 3; i<=number; i++) {\n      res = pre1 + pre2\n      pre2 = pre1\n      pre1 = res \n    }\n    return res\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("blockquote",[n("p",[s._v("Q3: 假设农场中成熟的母牛每年只会生 1 头小母牛，并且永远不会死。第一年农场有 1 只成熟的母牛，从第二年开始，母牛开始生小母牛， 每只小母牛 3 年之后成熟又可以生小母牛。给定整数 N，求出 N 年后牛的数量。")])]),s._v(" "),n("h3",{attrs:{id:"思路-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#思路-3"}},[s._v("#")]),s._v(" 思路")]),s._v(" "),n("h4",{attrs:{id:"问题转化-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题转化-3"}},[s._v("#")]),s._v(" 问题转化")]),s._v(" "),n("p",[s._v("F(N) 为 N 年后牛的数量。")]),s._v(" "),n("h4",{attrs:{id:"递推公示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递推公示"}},[s._v("#")]),s._v(" 递推公示")]),s._v(" "),n("p",[s._v("第 N 年牛的数量为第 N - 1 年牛的数量 + 新增的小牛，新增的小牛应该是 N - 3 年牛的数量。")]),s._v(" "),n("p",[s._v("即： F(N) = F(N-1) +  F(N-3)")]),s._v(" "),n("h4",{attrs:{id:"找初值-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#找初值-3"}},[s._v("#")]),s._v(" 找初值")]),s._v(" "),n("p",[s._v("F(1) = 1; F(2) = 2; F(3) = 3; F(4) = 4")]),s._v(" "),n("h4",{attrs:{id:"转化成代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转化成代码"}},[s._v("#")]),s._v(" 转化成代码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  function cowCount(N) {\n    if (N <= 3) return N\n    var n1 = 1;\n    var n2 = 2;\n    var n3 = 3;\n    var res\n    for (var i = 4; i <= N; i++) {\n      res = n1 + n3\n      n1 = n2\n      n2 = n3\n      n3 = res\n    }\n    return res\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h2",{attrs:{id:"矩阵的最小路径和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#矩阵的最小路径和"}},[s._v("#")]),s._v(" 矩阵的最小路径和")])])}),[],!1,null,null,null);a.default=r.exports}}]);