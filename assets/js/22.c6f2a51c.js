(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{192:function(a,s,e){"use strict";e.r(s);var n=e(0),t=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"一、工具类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、工具类","aria-hidden":"true"}},[a._v("#")]),a._v(" 一、工具类")]),a._v(" "),e("p",[a._v("文件路径 lib/util.js")]),a._v(" "),e("h3",{attrs:{id:"数据类型判定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型判定","aria-hidden":"true"}},[a._v("#")]),a._v(" 数据类型判定")]),a._v(" "),e("h4",{attrs:{id:"object-prototype-tostring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring","aria-hidden":"true"}},[a._v("#")]),a._v(" Object.prototype.toString")]),a._v(" "),e("ul",[e("li",[a._v("array、arrayBuffer、file、blob、function、date")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  // eg. 判断是否是 arrayBuffer 类型\n  Object.prototype.toString.call(val) === '[object ArrayBuffer]'\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h4",{attrs:{id:"typeof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typeof","aria-hidden":"true"}},[a._v("#")]),a._v(" typeof")]),a._v(" "),e("ul",[e("li",[a._v("undefined、string、number、object")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  // eg. 判断是否是 string 类型\n  typeof val === 'string'\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h4",{attrs:{id:"instanceof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instanceof","aria-hidden":"true"}},[a._v("#")]),a._v(" instanceof")]),a._v(" "),e("p",[a._v("URLSearchParams 是一个类，它的实例封装了一些处理查询字符串的实用方法，构造函数可以传一个字符串。")]),a._v(" "),e("ul",[e("li",[a._v("formData、URLSearchParams")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  // eg. 判断是否是 formData 类型\n   (typeof FormData !== 'undefined') && (val instanceof FormData)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h4",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他","aria-hidden":"true"}},[a._v("#")]),a._v(" 其他")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("buffer")]),a._v(" "),e("p",[a._v("buffer 是 Node.js 中用于读取或者操作二进制数据量的类，其类上定义了 isBuffer() 方法判断该数据是否是 Buffer 的实例")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])])]),a._v(" "),e("li",[e("p",[a._v("axios适用的浏览器环境判断")]),a._v(" "),e("p",[a._v("非 RN 环境，非原生环境，不能是 web-worker（ web-worker 无法使用 window 对象和 document 对象）")])])]),a._v(" "),e("h3",{attrs:{id:"遍历"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#遍历","aria-hidden":"true"}},[a._v("#")]),a._v(" 遍历")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("forEach（obj, fn）")]),a._v(" "),e("p",[a._v("适用于数组和对象，如果obj不是两者之一，则将其转化为 [obj] 的数组形式。如果是数组 / 对象，则遍历数组 / 对象，执行fn(item, index, obj) | fn(value, key, obj), 此时的 key 指的是自身属性，不是继承而来的。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function forEach (obj, fn) {\n  ...\n  if (isArray(obj)) {\n    // 也可以这样写\n    // return obj.forEach(fn)\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br")])]),e("p",[a._v("拓展了array.forEach的功能，使其应用于普通对象。")])])]),a._v(" "),e("h3",{attrs:{id:"合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并","aria-hidden":"true"}},[a._v("#")]),a._v(" 合并")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("merge (obj1, obj2, obj3...)")]),a._v(" "),e("p",[a._v("合并对象，相同的key，如果值为对象，后面的会和前面的值进行合并，类似于Object.assign(),该方法也适用于数组。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  function merge(/* obj1, obj2, obj3, ... */) {\n    var result = {};\n    function assignValue(val, key) {\n      if (typeof result[key] === 'object' && typeof val === 'object') {\n        result[key] = merge(result[key], val);\n      } else {\n        result[key] = val;\n      }\n    }\n\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      forEach(arguments[i], assignValue);\n    }\n    return result;\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br")])])]),a._v(" "),e("li",[e("p",[a._v("merge 和 Object.assign() 的区别")]),a._v(" "),e("p",[a._v("merge 遇到相同属性的时候，如果属性值为纯对象或者集合时，不是用后面的属性去覆盖前面的属性值，而是会把前后两个属性值合并。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  // { a: 1, b: { e: 4 } }\n  Object.assign(\n    {},\n    { a: 1 },\n    { b: { c: 2, d: 3} },\n    { b: { e: 4 } }\n  )\n  // { a: 1, b: { c: 2, d: 3, e: 4 } }\n  merge({},\n    { a: 1 },\n    { b: { c: 2, d: 3} },\n    { b: { e: 4 } }\n  )\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br")])])]),a._v(" "),e("li",[e("p",[a._v("deepMerge (obj1, obj2, obj3)")]),a._v(" "),e("p",[a._v("该方法类似于 Merge，唯一区别是返回的新对象不会影响到传入的参数对象。")])])]),a._v(" "),e("h3",{attrs:{id:"继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#继承","aria-hidden":"true"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("extend(a, b, thisArg)")]),a._v(" "),e("p",[a._v("遍历 b 的 key，如果该 key 的值为function，将 this 绑定到 thisArg 上并赋值给 a，否则将 a[key] 置为 b[key]，最后返回a。")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("  function extend(a, b, thisArg) {\n    forEach(b, function assignValue(val, key) {\n      if (thisArg && typeof v al === 'function') {\n        a[key] = bind(val, thisArg);\n      } else {\n        a[key] = val;\n      }\n    });\n    return a;\n  }\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br")])])])])])}],!1,null,null,null);t.options.__file="tools.md";s.default=t.exports}}]);